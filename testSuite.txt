#!/bin/bash# runTest runs the given program with the given input and returns the resulting output# runTest inputs:# {1} - the test number# {2} - suite-file (containing the list of tests)# {3} - the program to be testedrunTest(){        declare testName        testName=`head -${1} ${2} | tail -1`        ./${3} < ${testName}.in}# getOutput fetches the expected output from the .out file# getOutput inputs:# {1} - the test number# {2} - suite-file (containing the list of tests)getOutput(){        declare testName        testName=`head -${1} ${2} | tail -1`        cat ${testName}.out}# Checks to see if there are parameteresif [ ${#} -eq 0 ]; then        echo Usage: ./runSuite suite-file program        echo suite-file: the list of tests to be run        echo program: the program to be tested        echo *Note: .in and .out files must be present in the same directory as suite-file        exit 1fiquiet=0 # By default, quiet is off# Checks for the -q optionif [ ${1} == "-q" ]; then        quiet=1        shift # Removes the -q or --quiet optional parameterelif [ ${1} == "--quiet" ]; then        quiet=1        shiftfiif [ ${#} -ne 2 ]; then        echo Usage: ./runSuite suite-file program        echo suite-file: the list of tests to be run        echo program: the program to be tested        echo *Note: .in and .out files must be present in the same directory as suite-file        exit 1fi# Main routinertn(){        test_tracker=1        number_of_tests=`cat ${1} | wc -l`        while [ ${test_tracker} -le ${number_of_tests} ]; do                testName=`head -${test_tracker} ${1} | tail -1`                if [ ! -r ${testName}.in ]; then                        echo Error: ${testName}.in unreadable                        exit 2                elif [ ! -f ${testName}.in ]; then                        echo Error: ${testName}.in cannot be accessed                        exit 2                elif [ ! -r ${testName}.out ]; then                        echo Error: ${testName}.out unreadable                        exit 2                elif [ ! -f ${testName}.out ]; then                        echo Error: ${testName}.out cannot be accessed                        exit 2                fi                test_tracker=`expr ${test_tracker} + 1`        done        test_tracker=1        while [ ${test_tracker} -le ${number_of_tests} ]; do                testName=`head -${test_tracker} ${1} | tail -1`                # Compares the expected output with the acual output                expected_out=`getOutput ${test_tracker} ${1}`                test_out=`runTest ${test_tracker} ${1} ${2}`                if [ "${test_out}" == "${expected_out}" ]; then                        echo Test passed: ${testName}                elif [ ${quiet} -eq 0 ]; then                        echo Test failed: ${testName}                        echo Input:                        cat ${testName}.in                        echo Expected:                        cat ${testName}.out                        echo Actual:                        runTest ${test_tracker} ${1} ${2}                else                        echo Test failed: ${testName}                fi                test_tracker=`expr ${test_tracker} + 1`        done}rtn ${1} ${2}